generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  password  String?
  role      UserRole  @default(user)
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())

  toolsCreated Tool[] @relation("ToolsCreatedBy")
  toolsUpdated Tool[] @relation("ToolsUpdatedBy")
  loanCreated  Loan[] @relation("LoanCreatedBy")
  loanUpdated  Loan[] @relation("LoanUpdatedBy")

  auditLog AuditLog[]

  @@map("users")
}

model Tool {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  category    String
  status      ToolStatus
  created_by  String
  updated_by  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  createdBy User @relation("ToolsCreatedBy", fields: [created_by], references: [id])
  updatedBy User @relation("ToolsUpdatedBy", fields: [updated_by], references: [id])

  loans Loan[]

  @@map("tool")
}

model Loan {
  id          String     @id @default(cuid())
  email       String
  toolId      String
  tool        Tool       @relation(fields: [toolId], references: [id])
  loan_date   DateTime
  return_date DateTime
  status      LoanStatus
  created_by  String
  updated_by  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  createdBy User @relation("LoanCreatedBy", fields: [created_by], references: [id])
  updatedBy User @relation("LoanUpdatedBy", fields: [updated_by], references: [id])

  @@map("loan")
}

model AuditLog {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  action     String
  targetid   String
  targetType TargetType
  createdAt  DateTime   @default(now())

  @@map("auditLog")
}

enum UserRole {
  user
  admin
}

enum ToolStatus {
  available
  unavailable
  pending
  borrowed
}

enum LoanStatus {
  pending
  rejected
  borrowed
  returned
  overdue
}

enum TargetType {
  TOOL
  LOAN
}
